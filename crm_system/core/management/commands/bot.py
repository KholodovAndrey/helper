import os
import datetime
import logging
from enum import Enum
from django.core.management.base import BaseCommand
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler
)
from core.models import Client, Order, Expense
from asgiref.sync import sync_to_async
from django.db import IntegrityError
from django.core.exceptions import MultipleObjectsReturned

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Enum –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
class State(Enum):
    MAIN_MENU = 0
    CLIENTS_MENU = 1
    ORDERS_MENU = 2
    OPERATIONS_MENU = 3
    AWAITING_CLIENT_NAME = 4
    AWAITING_CLIENT_CONTACTS = 5
    AWAITING_CLIENT_NOTES = 6
    AWAITING_ORDER_NAME = 7
    AWAITING_ORDER_CLIENT = 8
    AWAITING_ORDER_COST = 9
    AWAITING_ORDER_DEADLINE = 10
    AWAITING_EXPENSE_COMMENT = 11
    AWAITING_EXPENSE_COST = 12

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è "–º–∞–≥–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫"
class ButtonText:
    CLIENTS = 'üë• –ö–ª–∏–µ–Ω—Ç—ã'
    ORDERS = 'üìã –°–¥–µ–ª–∫–∏'
    OPERATIONS = 'üíº –û–ø–µ—Ä–∞—Ü–∏–∏'
    STATS = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    ADD_CLIENT = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞'
    LIST_CLIENTS = 'üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤'
    BACK = 'üîô –ù–∞–∑–∞–¥'
    ADD_ORDER = '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É'
    ACTIVE_ORDERS = 'üìà –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏'
    ARCHIVED_ORDERS = 'üìÅ –ê—Ä—Ö–∏–≤ —Å–¥–µ–ª–æ–∫'
    COMPLETE_ORDER = '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É'
    ADD_INCOME = 'üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥'
    ADD_EXPENSE = 'üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'
    OPERATIONS_HISTORY = 'üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π'
    SKIP = '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ CRM —Å–∏—Å—Ç–µ–º—ã'
    
    def handle(self, *args, **kwargs):
        TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        if not TOKEN:
            self.stderr.write("–û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN")
            return
        
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ü–ï–†–í–´–ú–ò
        application.add_handler(CallbackQueryHandler(self.income_button_handler, pattern="^income_"))
        application.add_handler(CallbackQueryHandler(self.complete_order_button_handler, pattern="^complete_"))
        
        # Conversation Handler –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", self.start),
                MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_main_menu)
            ],
            states={
                State.MAIN_MENU.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_main_menu)
                ],
                State.CLIENTS_MENU.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_clients_menu)
                ],
                State.ORDERS_MENU.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_orders_menu)
                ],
                State.OPERATIONS_MENU.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_operations_menu)
                ],
                State.AWAITING_CLIENT_NAME.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_client_name)
                ],
                State.AWAITING_CLIENT_CONTACTS.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_client_contacts)
                ],
                State.AWAITING_CLIENT_NOTES.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_client_notes)
                ],
                State.AWAITING_ORDER_NAME.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_order_name)
                ],
                State.AWAITING_ORDER_CLIENT.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_order_client)
                ],
                State.AWAITING_ORDER_COST.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_order_cost)
                ],
                State.AWAITING_ORDER_DEADLINE.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_order_deadline)
                ],
                State.AWAITING_EXPENSE_COMMENT.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_expense_comment)
                ],
                State.AWAITING_EXPENSE_COST.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_expense_cost)
                ],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)],
            map_to_parent={
                ConversationHandler.END: State.MAIN_MENU.value,
            }
        )
        
        application.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)
        
        self.stdout.write(self.style.SUCCESS('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...'))
        application.run_polling()

    async def error_handler(self, update: object, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
        logger.error("Exception while handling an update:", exc_info=context.error)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await update.message.reply_text(
            "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM —Å–∏—Å—Ç–µ–º—É!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:\n"
            "üë• –ö–ª–∏–µ–Ω—Ç—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n"
            "üìã –°–¥–µ–ª–∫–∏ - —Ä–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏\n"
            "üíº –û–ø–µ—Ä–∞—Ü–∏–∏ - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
        )
        
        await self.show_main_menu(update, context)
        return State.MAIN_MENU.value

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data.clear()
        
        await self.show_main_menu(update, context)
        return State.MAIN_MENU.value

    async def handle_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = update.message.text
        
        if text == ButtonText.CLIENTS:
            await self.show_clients_menu(update, context)
            return State.CLIENTS_MENU.value
        elif text == ButtonText.ORDERS:
            await self.show_orders_menu(update, context)
            return State.ORDERS_MENU.value
        elif text == ButtonText.OPERATIONS:
            await self.show_operations_menu(update, context)
            return State.OPERATIONS_MENU.value
        elif text == ButtonText.STATS:
            await self.show_stats(update, context)
            return State.MAIN_MENU.value
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω—é:")
            await self.show_main_menu(update, context)
            return State.MAIN_MENU.value

    async def handle_clients_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        text = update.message.text
        
        if text == ButtonText.ADD_CLIENT:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
                reply_markup=ReplyKeyboardRemove()
            )
            return State.AWAITING_CLIENT_NAME.value
        elif text == ButtonText.LIST_CLIENTS:
            await self.list_clients(update, context)
            return State.CLIENTS_MENU.value
        elif text == ButtonText.BACK:
            await self.show_main_menu(update, context)
            return State.MAIN_MENU.value
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω—é:")
            await self.show_clients_menu(update, context)
            return State.CLIENTS_MENU.value

    async def handle_orders_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Å–¥–µ–ª–æ–∫"""
        text = update.message.text
        
        if text == ButtonText.ADD_ORDER:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏:",
                reply_markup=ReplyKeyboardRemove()
            )
            return State.AWAITING_ORDER_NAME.value
        elif text == ButtonText.ACTIVE_ORDERS:
            await self.show_active_orders(update, context)
            return State.ORDERS_MENU.value
        elif text == ButtonText.ARCHIVED_ORDERS:
            await self.show_archived_orders(update, context)
            return State.ORDERS_MENU.value
        elif text == ButtonText.COMPLETE_ORDER:
            await self.show_orders_to_complete(update, context)
            return State.ORDERS_MENU.value
        elif text == ButtonText.BACK:
            await self.show_main_menu(update, context)
            return State.MAIN_MENU.value
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω—é:")
            await self.show_orders_menu(update, context)
            return State.ORDERS_MENU.value

    async def handle_operations_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
        text = update.message.text
        
        if text == ButtonText.ADD_INCOME:
            await self.show_orders_for_income(update, context)
            return State.OPERATIONS_MENU.value
        elif text == ButtonText.ADD_EXPENSE:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥—É:",
                reply_markup=ReplyKeyboardRemove()
            )
            return State.AWAITING_EXPENSE_COMMENT.value
        elif text == ButtonText.OPERATIONS_HISTORY:
            await self.show_operations_history(update, context)
            return State.OPERATIONS_MENU.value
        elif text == ButtonText.BACK:
            await self.show_main_menu(update, context)
            return State.MAIN_MENU.value
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω—é:")
            await self.show_operations_menu(update, context)
            return State.OPERATIONS_MENU.value

    # ===== –û–°–ù–û–í–ù–´–ï –ú–ï–ù–Æ =====
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [ButtonText.CLIENTS, ButtonText.ORDERS],
            [ButtonText.OPERATIONS, ButtonText.STATS]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        if update.message:
            await update.message.reply_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=reply_markup
            )
        else:
            await update.callback_query.message.reply_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=reply_markup
            )

    async def show_clients_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        keyboard = [
            [ButtonText.ADD_CLIENT, ButtonText.LIST_CLIENTS],
            [ButtonText.BACK]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        if update.message:
            await update.message.reply_text(
                "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.callback_query.message.reply_text(
                "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

    async def show_orders_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Å–¥–µ–ª–æ–∫"""
        keyboard = [
            [ButtonText.ADD_ORDER],
            [ButtonText.ACTIVE_ORDERS, ButtonText.ARCHIVED_ORDERS],
            [ButtonText.COMPLETE_ORDER],
            [ButtonText.BACK]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        if update.message:
            await update.message.reply_text(
                "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.callback_query.message.reply_text(
                "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

    async def show_operations_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
        keyboard = [
            [ButtonText.ADD_INCOME, ButtonText.ADD_EXPENSE],
            [ButtonText.OPERATIONS_HISTORY],
            [ButtonText.BACK]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        if update.message:
            await update.message.reply_text(
                "üíº –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.callback_query.message.reply_text(
                "üíº –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

    # ===== –ê–°–ò–ù–•–†–û–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î =====
    @sync_to_async
    def create_client(self, name, contacts, notes=''):
        try:
            return Client.objects.create(
                name=name,
                contacts=contacts,
                notes=notes
            )
        except IntegrityError:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: –∏–º—è '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return None

    @sync_to_async
    def create_order(self, name, client, cost, deadline):
        try:
            return Order.objects.create(
                name=name,
                client=client,
                cost=cost,
                deadline=deadline
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
            return None

    @sync_to_async
    def create_expense(self, comment, cost):
        try:
            return Expense.objects.create(
                comment=comment,
                cost=cost
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {e}")
            return None

    @sync_to_async
    def get_client_by_name(self, name):
        try:
            return Client.objects.get(name=name)
        except Client.DoesNotExist:
            return None
        except MultipleObjectsReturned:
            logger.warning(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏–º–µ–Ω–µ–º '{name}'")
            return Client.objects.filter(name=name).first()

    @sync_to_async
    def get_all_clients(self):
        return list(Client.objects.all())

    @sync_to_async
    def get_unpaid_orders(self):
        return list(Order.objects.filter(status='unpaid').select_related('client'))

    @sync_to_async
    def get_paid_orders(self):
        return list(Order.objects.filter(status='paid').select_related('client'))

    @sync_to_async
    def get_completed_orders(self):
        return list(Order.objects.filter(status='completed').select_related('client'))

    @sync_to_async
    def get_all_orders(self):
        return list(Order.objects.all().select_related('client'))

    @sync_to_async
    def get_all_expenses(self):
        return list(Expense.objects.all())

    @sync_to_async
    def update_order_status(self, order_id, status):
        try:
            order = Order.objects.get(id=order_id)
            order.status = status
            order.save()
            return True, order
        except Order.DoesNotExist:
            return False, None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏: {e}")
            return False, None

    @sync_to_async
    def get_order_stats(self):
        try:
            total_orders = Order.objects.count()
            active_orders = Order.objects.filter(status__in=['unpaid', 'paid']).count()
            archived_orders = Order.objects.filter(status='completed').count()
            expensive_order = Order.objects.order_by('-cost').first()
            
            return total_orders, active_orders, archived_orders, expensive_order
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–¥–µ–ª–∫–∞–º: {e}")
            return 0, 0, 0, None

    @sync_to_async
    def get_financial_stats(self):
        try:
            paid_completed_orders = Order.objects.filter(status__in=['paid', 'completed'])
            total_income = sum(order.cost for order in paid_completed_orders)
            
            expenses = Expense.objects.all()
            total_expense = sum(expense.cost for expense in expenses)
            
            now = datetime.datetime.now()
            month_orders = Order.objects.filter(
                status__in=['paid', 'completed'],
                date__month=now.month,
                date__year=now.year
            )
            month_income = sum(order.cost for order in month_orders)
            
            month_expenses = Expense.objects.filter(
                date__month=now.month,
                date__year=now.year
            )
            month_expense = sum(expense.cost for expense in month_expenses)
            
            return total_income, total_expense, month_income, month_expense
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return 0, 0, 0, 0

    # ===== –†–ê–ë–û–¢–ê –° –ö–õ–ò–ï–ù–¢–ê–ú–ò =====
    async def get_client_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        if update.message.text == ButtonText.BACK:
            await self.show_clients_menu(update, context)
            return State.CLIENTS_MENU.value
            
        context.user_data['client_name'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞:")
        return State.AWAITING_CLIENT_CONTACTS.value

    async def get_client_contacts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞"""
        if update.message.text == ButtonText.BACK:
            await self.show_clients_menu(update, context)
            return State.CLIENTS_MENU.value
            
        context.user_data['client_contacts'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        return State.AWAITING_CLIENT_NOTES.value

    async def get_client_notes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        if update.message.text == ButtonText.BACK:
            await self.show_clients_menu(update, context)
            return State.CLIENTS_MENU.value
            
        if update.message.text.lower() != ButtonText.SKIP:
            context.user_data['client_notes'] = update.message.text
        else:
            context.user_data['client_notes'] = ''
        
        client = await self.create_client(
            context.user_data['client_name'],
            context.user_data['client_contacts'],
            context.user_data.get('client_notes', '')
        )
        
        if client:
            await update.message.reply_text("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        
        context.user_data.clear()
        
        await self.show_clients_menu(update, context)
        return State.CLIENTS_MENU.value

    async def list_clients(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        clients = await self.get_all_clients()
        if not clients:
            await update.message.reply_text("üìù –ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            response = "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
            for client in clients:
                response += f"‚óè {client.name} - {client.contacts}\n"
                if client.notes:
                    response += f"  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {client.notes}\n"
                response += "\n"
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(response) > 4096:
                for x in range(0, len(response), 4096):
                    await update.message.reply_text(response[x:x+4096])
            else:
                await update.message.reply_text(response)
        
        await self.show_clients_menu(update, context)

    # ===== –†–ê–ë–û–¢–ê –°–û –°–î–ï–õ–ö–ê–ú–ò =====
    async def get_order_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        if update.message.text == ButtonText.BACK:
            await self.show_orders_menu(update, context)
            return State.ORDERS_MENU.value
            
        context.user_data['order_name'] = update.message.text
        
        clients = await self.get_all_clients()
        if not clients:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞.")
            await self.show_orders_menu(update, context)
            return State.ORDERS_MENU.value
        
        keyboard = [[client.name] for client in clients]
        keyboard.append([ButtonText.BACK])
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return State.AWAITING_ORDER_CLIENT.value

    async def show_orders_to_complete(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏"""
        paid_orders = await self.get_paid_orders()
    
        if not paid_orders:
            await update.message.reply_text("‚ùå –ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return
        
        keyboard = []
        for order in paid_orders:
            button_text = f"{order.name} ({order.client.name}) - {order.cost} —Ä—É–±"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"complete_{order.id}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )

    async def complete_order_button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        order_id = int(query.data.split('_')[1])
        success, order = await self.update_order_status(order_id, 'completed')
    
        if success:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤—è–∑–∞–Ω–Ω—ã–º –ø–æ–ª—è–º
            order_name = await sync_to_async(lambda: order.name)()
            client_name = await sync_to_async(lambda: order.client.name)()
            
            await query.edit_message_text(
                f"‚úÖ –°–¥–µ–ª–∫–∞ '{order_name}' ({client_name}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤."
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.")
    
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await self.show_orders_menu_from_callback(update, context)

    async def get_order_client(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏"""
        if update.message.text == ButtonText.BACK:
            await self.show_orders_menu(update, context)
            return State.ORDERS_MENU.value
            
        client = await self.get_client_by_name(update.message.text)
        
        if client:
            context.user_data['order_client'] = client
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
                reply_markup=ReplyKeyboardRemove()
            )
            return State.AWAITING_ORDER_COST.value
        else:
            await update.message.reply_text("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return State.AWAITING_ORDER_CLIENT.value

    async def get_order_cost(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏"""
        if update.message.text == ButtonText.BACK:
            await self.show_orders_menu(update, context)
            return State.ORDERS_MENU.value
            
        try:
            cost = float(update.message.text)
            context.user_data['order_cost'] = cost
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–∏–∫–∞
            today = datetime.date.today()
            dates_keyboard = []
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–∞—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
            for i in range(7):
                date = today + datetime.timedelta(days=i)
                dates_keyboard.append([date.strftime('%d.%m.%Y')])
            
            dates_keyboard.append([ButtonText.BACK])
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é (–î–î.–ú–ú.–ì–ì–ì–ì):",
                reply_markup=ReplyKeyboardMarkup(dates_keyboard, resize_keyboard=True)
            )
            return State.AWAITING_ORDER_DEADLINE.value
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return State.AWAITING_ORDER_COST.value

    async def get_order_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ —Å–¥–µ–ª–∫–∏"""
        if update.message.text == ButtonText.BACK:
            await self.show_orders_menu(update, context)
            return State.ORDERS_MENU.value
            
        try:
            deadline = datetime.datetime.strptime(update.message.text, '%d.%m.%Y').date()
            
            order = await self.create_order(
                context.user_data['order_name'],
                context.user_data['order_client'],
                context.user_data['order_cost'],
                deadline
            )
            
            if order:
                await update.message.reply_text("‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.")
                
            context.user_data.clear()
            
            await self.show_orders_menu(update, context)
            return State.ORDERS_MENU.value
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return State.AWAITING_ORDER_DEADLINE.value

    async def show_active_orders(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏"""
        active_orders = await self.get_unpaid_orders()
        paid_orders = await self.get_paid_orders()
    
        if not active_orders and not paid_orders:
            await update.message.reply_text("üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç.")
        else:
            response = "üìà –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n\n"
        
            if active_orders:
                response += "üí≥ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ:\n"
                for order in active_orders:
                    response += f"ID: {order.id} - {order.name} ({order.client.name}) - {order.cost} —Ä—É–±\n"
                response += "\n"
        
            if paid_orders:
                response += "‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ:\n"
                for order in paid_orders:
                    deadline_str = order.deadline.strftime('%d.%m.%Y') if order.deadline else "–Ω–µ —É–∫–∞–∑–∞–Ω"
                    response += f"ID: {order.id} - {order.name} ({order.client.name}) - {order.cost} —Ä—É–±\n"
                    response += f"  –°—Ä–æ–∫: {deadline_str}\n"
                response += "\n"
        
            response += "üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–û–ø–µ—Ä–∞—Ü–∏–∏' -> '–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥'"
        
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(response) > 4096:
                for x in range(0, len(response), 4096):
                    await update.message.reply_text(response[x:x+4096])
            else:
                await update.message.reply_text(response)
    
        await self.show_orders_menu(update, context)

    async def show_archived_orders(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å–¥–µ–ª–æ–∫"""
        completed_orders = await self.get_completed_orders()

        if not completed_orders:
            await update.message.reply_text("üìÅ –ê—Ä—Ö–∏–≤ —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç.")
        else:
            response = "üìÅ –ê—Ä—Ö–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:\n\n"
            for order in completed_orders:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤—è–∑–∞–Ω–Ω—ã–º –ø–æ–ª—è–º
                order_name = await sync_to_async(lambda: order.name)()
                client_name = await sync_to_async(lambda: order.client.name)()
                deadline_str = await sync_to_async(lambda: order.deadline.strftime('%d.%m.%Y') if order.deadline else "–Ω–µ —É–∫–∞–∑–∞–Ω")()
                date_str = await sync_to_async(lambda: order.date.strftime('%d.%m.%Y'))()
        
                response += f"‚óè {order_name} ({client_name})\n"
                response += f"  –°—Ç–æ–∏–º–æ—Å—Ç—å: {order.cost} —Ä—É–±\n"
                response += f"  –°—Ä–æ–∫: {deadline_str}\n"
                response += f"  –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {date_str}\n\n"

            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(response) > 4096:
                for x in range(0, len(response), 4096):
                    await update.message.reply_text(response[x:x+4096])
            else:
                await update.message.reply_text(response)

        await self.show_orders_menu(update, context)

    # ===== –û–ü–ï–†–ê–¶–ò–ò =====
    async def show_orders_for_income(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏"""
        unpaid_orders = await self.get_unpaid_orders()
    
        if not unpaid_orders:
            await update.message.reply_text("‚ùå –ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.")
            return
    
        keyboard = []
        for order in unpaid_orders:
            button_text = f"{order.name} ({order.client.name}) - {order.cost} —Ä—É–±"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"income_{order.id}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è —É—á–µ—Ç–∞ –æ–ø–ª–∞—Ç—ã:",
            reply_markup=reply_markup
        )

    async def income_button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"""
        query = update.callback_query
        await query.answer()
        
        order_id = int(query.data.split('_')[1])
        success, order = await self.update_order_status(order_id, 'paid')
    
        if success:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤—è–∑–∞–Ω–Ω—ã–º –ø–æ–ª—è–º
            order_name = await sync_to_async(lambda: order.name)()
            client_name = await sync_to_async(lambda: order.client.name)()
            
            await query.edit_message_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—á—Ç–µ–Ω–∞! –°–¥–µ–ª–∫–∞ '{order_name}' ({client_name}) –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ."
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—á–µ—Ç–µ –æ–ø–ª–∞—Ç—ã.")
    
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
        await self.show_operations_menu_from_callback(update, context)

    async def get_expense_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
        if update.message.text == ButtonText.BACK:
            await self.show_operations_menu(update, context)
            return State.OPERATIONS_MENU.value
            
        context.user_data['expense_comment'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        return State.AWAITING_EXPENSE_COST.value

    async def get_expense_cost(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞"""
        if update.message.text == ButtonText.BACK:
            await self.show_operations_menu(update, context)
            return State.OPERATIONS_MENU.value
            
        try:
            cost = float(update.message.text)
            
            expense = await self.create_expense(
                context.user_data['expense_comment'],
                cost
            )
            
            if expense:
                await update.message.reply_text("‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞.")
                
            context.user_data.clear()
            
            await self.show_operations_menu(update, context)
            return State.OPERATIONS_MENU.value
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return State.AWAITING_EXPENSE_COST.value

    async def show_operations_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
        expenses = await self.get_all_expenses()
        paid_orders = await self.get_paid_orders()
        completed_orders = await self.get_completed_orders()
        
        if not expenses and not paid_orders and not completed_orders:
            await update.message.reply_text("üìù –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞.")
        else:
            response = "üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n"
            
            if paid_orders or completed_orders:
                response += "üí∞ –î–æ—Ö–æ–¥—ã (–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏):\n"
                for order in paid_orders + completed_orders:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤—è–∑–∞–Ω–Ω—ã–º –ø–æ–ª—è–º
                    order_name = await sync_to_async(lambda: order.name)()
                    date_str = await sync_to_async(lambda: order.date.strftime('%d.%m.%Y'))()
                    response += f"‚óè {date_str} - {order_name} - +{order.cost} —Ä—É–±\n"
                response += "\n"
            
            if expenses:
                response += "üí∏ –†–∞—Å—Ö–æ–¥—ã:\n"
                for expense in expenses:
                    date_str = await sync_to_async(lambda: expense.date.strftime('%d.%m.%Y'))()
                    response += f"‚óè {date_str} - {expense.comment} - -{expense.cost} —Ä—É–±\n"
            
            # –ò—Ç–æ–≥–∏
            total_income = sum(order.cost for order in paid_orders + completed_orders)
            total_expense = sum(expense.cost for expense in expenses)
            balance = total_income - total_expense
            
            response += f"\nüìä –ò—Ç–æ–≥–∏:\n"
            response += f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income} —Ä—É–±\n"
            response += f"–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {total_expense} —Ä—É–±\n"
            response += f"–ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±"
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(response) > 4096:
                for x in range(0, len(response), 4096):
                    await update.message.reply_text(response[x:x+4096])
            else:
                await update.message.reply_text(response)
        
        await self.show_operations_menu(update, context)

    async def show_orders_menu_from_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–¥–µ–ª–æ–∫ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback"""
        query = update.callback_query
        await self.show_orders_menu(update, context)

    async def show_operations_menu_from_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback"""
        query = update.callback_query
        await self.show_operations_menu(update, context)

    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        total_orders, active_orders, archived_orders, expensive_order = await self.get_order_stats()
        total_income, total_expense, month_income, month_expense = await self.get_financial_stats()
        
        clients_count = len(await self.get_all_clients())
        
        expensive_order_name = expensive_order.name if expensive_order else 'N/A'
        expensive_order_cost = expensive_order.cost if expensive_order else 0
        
        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
            f"üë• –ö–ª–∏–µ–Ω—Ç—ã: {clients_count}\n"
            f"üìã –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_orders}\n"
            f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_orders}\n"
            f"üìÅ –í –∞—Ä—Ö–∏–≤–µ: {archived_orders}\n"
            f"üí∞ –°–∞–º–∞—è –∫—Ä—É–ø–Ω–∞—è —Å–¥–µ–ª–∫–∞: {expensive_order_name} "
            f"({expensive_order_cost} —Ä—É–±)\n\n"
            f"üíµ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income} —Ä—É–±\n"
            f"üí∏ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {total_expense} —Ä—É–±\n"
            f"‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: {total_income - total_expense} —Ä—É–±\n"
            f"üìÖ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {month_income} —Ä—É–±\n"
            f"üìÖ –†–∞—Å—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {month_expense} —Ä—É–±\n"
            f"üìÖ –ú–µ—Å—è—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: {month_income - month_expense} —Ä—É–±"
        )
        
        await update.message.reply_text(response)
        await self.show_main_menu(update, context)