import os
import datetime
import logging
import asyncio
from enum import Enum
from django.core.management.base import BaseCommand
from asgiref.sync import sync_to_async
from django.db import IntegrityError
from django.core.exceptions import MultipleObjectsReturned

# Aiogram –∏–º–ø–æ—Ä—Ç—ã
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command as AiogramCommand, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.enums import ParseMode

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback

# –ú–æ–¥–µ–ª–∏ Django
from core.models import Client, Order, Expense

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è "–º–∞–≥–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫"
class ButtonText:
    CLIENTS = 'üë• –ö–ª–∏–µ–Ω—Ç—ã'
    ORDERS = 'üìã –°–¥–µ–ª–∫–∏'
    OPERATIONS = 'üíº –û–ø–µ—Ä–∞—Ü–∏–∏'
    STATS = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    ADD_CLIENT = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞'
    LIST_CLIENTS = 'üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤'
    BACK = 'üîô –ù–∞–∑–∞–¥'
    ADD_ORDER = '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É'
    ACTIVE_ORDERS = 'üìà –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏'
    ARCHIVED_ORDERS = 'üìÅ –ê—Ä—Ö–∏–≤ —Å–¥–µ–ª–æ–∫'
    COMPLETE_ORDER = '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É'
    ADD_INCOME = 'üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥'
    ADD_EXPENSE = 'üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'
    OPERATIONS_HISTORY = 'üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π'
    SKIP = '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    MAIN_MENU = State()
    CLIENTS_MENU = State()
    ORDERS_MENU = State()
    OPERATIONS_MENU = State()
    AWAITING_CLIENT_NAME = State()
    AWAITING_CLIENT_CONTACTS = State()
    AWAITING_CLIENT_NOTES = State()
    AWAITING_ORDER_NAME = State()
    AWAITING_ORDER_CLIENT = State()
    AWAITING_ORDER_COST = State()
    AWAITING_ORDER_DEADLINE = State()
    AWAITING_EXPENSE_COMMENT = State()
    AWAITING_EXPENSE_COST = State()

# ===== –ê–°–ò–ù–•–†–û–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î =====
@sync_to_async
def create_client(name, contacts, notes=''):
    try:
        client = Client.objects.create(
            name=name,
            contacts=contacts,
            notes=notes
        )
        logger.info(f"Created client: {name}")
        return client
    except IntegrityError:
        logger.error(f"Error creating client: name '{name}' already exists")
        return None
    except Exception as e:
        logger.error(f"Error creating client: {e}")
        return None

@sync_to_async
def create_order(name, client, cost, deadline):
    try:
        order = Order.objects.create(
            name=name,
            client=client,
            cost=cost,
            deadline=deadline
        )
        logger.info(f"Created order: {name} for client {client.name}")
        return order
    except Exception as e:
        logger.error(f"Error creating order: {e}")
        return None

@sync_to_async
def create_expense(comment, cost):
    try:
        expense = Expense.objects.create(
            comment=comment,
            cost=cost
        )
        logger.info(f"Created expense: {comment} - {cost}")
        return expense
    except Exception as e:
        logger.error(f"Error creating expense: {e}")
        return None

@sync_to_async
def get_client_by_name(name):
    try:
        return Client.objects.get(name=name)
    except Client.DoesNotExist:
        logger.warning(f"Client not found: {name}")
        return None
    except MultipleObjectsReturned:
        logger.warning(f"Multiple clients found with name: {name}")
        return Client.objects.filter(name=name).first()

@sync_to_async
def get_all_clients():
    return list(Client.objects.all())

@sync_to_async
def get_unpaid_orders():
    return list(Order.objects.filter(status='unpaid').select_related('client'))

@sync_to_async
def get_paid_orders():
    return list(Order.objects.filter(status='paid').select_related('client'))

@sync_to_async
def get_completed_orders():
    return list(Order.objects.filter(status='completed').select_related('client'))

@sync_to_async
def update_order_status(order_id, status):
    try:
        order = Order.objects.get(id=order_id)
        order.status = status
        order.save()
        logger.info(f"Updated order {order_id} status to {status}")
        return True, order
    except Order.DoesNotExist:
        logger.error(f"Order not found: {order_id}")
        return False, None
    except Exception as e:
        logger.error(f"Error updating order status: {e}")
        return False, None

@sync_to_async
def get_order_stats():
    try:
        total_orders = Order.objects.count()
        active_orders = Order.objects.filter(status__in=['unpaid', 'paid']).count()
        archived_orders = Order.objects.filter(status='completed').count()
        expensive_order = Order.objects.order_by('-cost').first()
        
        return total_orders, active_orders, archived_orders, expensive_order
    except Exception as e:
        logger.error(f"Error getting order stats: {e}")
        return 0, 0, 0, None

@sync_to_async
def get_financial_stats():
    try:
        paid_completed_orders = Order.objects.filter(status__in=['paid', 'completed'])
        total_income = sum(order.cost for order in paid_completed_orders)
        
        expenses = Expense.objects.all()
        total_expense = sum(expense.cost for expense in expenses)
        
        now = datetime.datetime.now()
        month_orders = Order.objects.filter(
            status__in=['paid', 'completed'],
            date__month=now.month,
            date__year=now.year
        )
        month_income = sum(order.cost for order in month_orders)
        
        month_expenses = Expense.objects.filter(
            date__month=now.month,
            date__year=now.year
        )
        month_expense = sum(expense.cost for expense in month_expenses)
        
        return total_income, total_expense, month_income, month_expense
    except Exception as e:
        logger.error(f"Error getting financial stats: {e}")
        return 0, 0, 0, 0

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

async def error_handler(update: types.Update, exception: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    logger.error(f"Exception while handling an update: {exception}", exc_info=True)

async def start(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info(f"User {message.from_user.id} started the bot")
    await message.answer(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM —Å–∏—Å—Ç–µ–º—É!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:\n"
        "üë• –ö–ª–∏–µ–Ω—Ç—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n"
        "üìã –°–¥–µ–ª–∫–∏ - —Ä–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏\n"
        "üíº –û–ø–µ—Ä–∞—Ü–∏–∏ - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
    )
    
    await show_main_menu(message, state)

async def cancel(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    logger.info(f"User {message.from_user.id} canceled operation")
    await message.answer(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
    
    await show_main_menu(message, state)

async def handle_main_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = message.text
    logger.info(f"User {message.from_user.id} selected: {text}")
    
    if text == ButtonText.CLIENTS:
        await show_clients_menu(message, state)
    elif text == ButtonText.ORDERS:
        await show_orders_menu(message, state)
    elif text == ButtonText.OPERATIONS:
        await show_operations_menu(message, state)
    elif text == ButtonText.STATS:
        await show_stats(message, state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω—é:")
        await show_main_menu(message, state)

async def handle_clients_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    text = message.text
    logger.info(f"User {message.from_user.id} selected in clients menu: {text}")
    
    if text == ButtonText.ADD_CLIENT:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.AWAITING_CLIENT_NAME)
    elif text == ButtonText.LIST_CLIENTS:
        await list_clients(message, state)
    elif text == ButtonText.BACK:
        await show_main_menu(message, state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω—é:")
        await show_clients_menu(message, state)

async def handle_orders_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Å–¥–µ–ª–æ–∫"""
    text = message.text
    logger.info(f"User {message.from_user.id} selected in orders menu: {text}")
    
    if text == ButtonText.ADD_ORDER:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.AWAITING_ORDER_NAME)
    elif text == ButtonText.ACTIVE_ORDERS:
        await show_active_orders(message, state)
    elif text == ButtonText.ARCHIVED_ORDERS:
        await show_archived_orders(message, state)
    elif text == ButtonText.COMPLETE_ORDER:
        await show_orders_to_complete(message, state)
    elif text == ButtonText.BACK:
        await show_main_menu(message, state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω—é:")
        await show_orders_menu(message, state)

async def handle_operations_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
    text = message.text
    logger.info(f"User {message.from_user.id} selected in operations menu: {text}")
    
    if text == ButtonText.ADD_INCOME:
        await show_orders_for_income(message, state)
    elif text == ButtonText.ADD_EXPENSE:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥—É:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.AWAITING_EXPENSE_COMMENT)
    elif text == ButtonText.OPERATIONS_HISTORY:
        await show_operations_history(message, state)
    elif text == ButtonText.BACK:
        await show_main_menu(message, state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω—é:")
        await show_operations_menu(message, state)

# ===== –û–°–ù–û–í–ù–´–ï –ú–ï–ù–Æ =====
async def show_main_menu(message: types.Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton(text=ButtonText.CLIENTS), KeyboardButton(text=ButtonText.ORDERS)],
        [KeyboardButton(text=ButtonText.OPERATIONS), KeyboardButton(text=ButtonText.STATS)]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    await state.set_state(Form.MAIN_MENU)
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

async def show_clients_menu(message: types.Message, state: FSMContext):
    """–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    keyboard = [
        [KeyboardButton(text=ButtonText.ADD_CLIENT), KeyboardButton(text=ButtonText.LIST_CLIENTS)],
        [KeyboardButton(text=ButtonText.BACK)]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    await state.set_state(Form.CLIENTS_MENU)
    await message.answer(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def show_orders_menu(message: types.Message, state: FSMContext):
    """–ú–µ–Ω—é —Å–¥–µ–ª–æ–∫"""
    keyboard = [
        [KeyboardButton(text=ButtonText.ADD_ORDER)],
        [KeyboardButton(text=ButtonText.ACTIVE_ORDERS), KeyboardButton(text=ButtonText.ARCHIVED_ORDERS)],
        [KeyboardButton(text=ButtonText.COMPLETE_ORDER)],
        [KeyboardButton(text=ButtonText.BACK)]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    await state.set_state(Form.ORDERS_MENU)
    await message.answer(
        "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def show_operations_menu(message: types.Message, state: FSMContext):
    """–ú–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
    keyboard = [
        [KeyboardButton(text=ButtonText.ADD_INCOME), KeyboardButton(text=ButtonText.ADD_EXPENSE)],
        [KeyboardButton(text=ButtonText.OPERATIONS_HISTORY)],
        [KeyboardButton(text=ButtonText.BACK)]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    await state.set_state(Form.OPERATIONS_MENU)
    await message.answer(
        "üíº –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# ===== –†–ê–ë–û–¢–ê –° –ö–õ–ò–ï–ù–¢–ê–ú–ò =====
async def get_client_name(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    if message.text == ButtonText.BACK:
        await show_clients_menu(message, state)
        return
        
    await state.update_data(client_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(Form.AWAITING_CLIENT_CONTACTS)

async def get_client_contacts(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞"""
    if message.text == ButtonText.BACK:
        await show_clients_menu(message, state)
        return
        
    await state.update_data(client_contacts=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await state.set_state(Form.AWAITING_CLIENT_NOTES)

async def get_client_notes(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    if message.text == ButtonText.BACK:
        await show_clients_menu(message, state)
        return
        
    data = await state.get_data()
    
    if message.text.lower() != ButtonText.SKIP:
        client_notes = message.text
    else:
        client_notes = ''
    
    client = await create_client(
        data['client_name'],
        data['client_contacts'],
        client_notes
    )
    
    if client:
        await message.answer("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
    await state.clear()
    await show_clients_menu(message, state)

async def list_clients(message: types.Message, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    clients = await get_all_clients()
    if not clients:
        await message.answer("üìù –ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        response = "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
        for client in clients:
            response += f"‚óè {client.name} - {client.contacts}\n"
            if client.notes:
                response += f"  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {client.notes}\n"
            response += "\n"
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4096:
            for x in range(0, len(response), 4096):
                await message.answer(response[x:x+4096])
        else:
            await message.answer(response)
    
    await show_clients_menu(message, state)

# ===== –†–ê–ë–û–¢–ê –°–û –°–î–ï–õ–ö–ê–ú–ò =====
async def get_order_name(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    if message.text == ButtonText.BACK:
        await show_orders_menu(message, state)
        return
        
    await state.update_data(order_name=message.text)
    
    clients = await get_all_clients()
    if not clients:
        await message.answer("‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞.")
        await show_orders_menu(message, state)
        return
    
    keyboard = [[KeyboardButton(text=client.name)] for client in clients]
    keyboard.append([KeyboardButton(text=ButtonText.BACK)])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    )
    await state.set_state(Form.AWAITING_ORDER_CLIENT)

async def show_orders_to_complete(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏"""
    paid_orders = await get_paid_orders()

    if not paid_orders:
        await message.answer("‚ùå –ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    
    keyboard = []
    for order in paid_orders:
        button_text = f"{order.name} ({order.client.name}) - {order.cost} —Ä—É–±"
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"complete_{order.id}")])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )

async def complete_order_button_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    order_id = int(callback_query.data.split('_')[1])
    success, order = await update_order_status(order_id, 'completed')

    if success:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤—è–∑–∞–Ω–Ω—ã–º –ø–æ–ª—è–º
        order_name = await sync_to_async(lambda: order.name)()
        client_name = await sync_to_async(lambda: order.client.name)()
        
        await callback_query.message.edit_text(
            f"‚úÖ –°–¥–µ–ª–∫–∞ '{order_name}' ({client_name}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤."
        )
    else:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await show_orders_menu(callback_query.message, state)

async def get_order_client(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏"""
    if message.text == ButtonText.BACK:
        await show_orders_menu(message, state)
        return
        
    client = await get_client_by_name(message.text)
    
    if client:
        await state.update_data(order_client=client)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.AWAITING_ORDER_COST)
    else:
        await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        await state.set_state(Form.AWAITING_ORDER_CLIENT)

async def get_order_cost(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏"""
    if message.text == ButtonText.BACK:
        await show_orders_menu(message, state)
        return
        
    try:
        cost = float(message.text)
        await state.update_data(order_cost=cost)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=await SimpleCalendar().start_calendar()
        )
        await state.set_state(Form.AWAITING_ORDER_DEADLINE)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        await state.set_state(Form.AWAITING_ORDER_COST)

async def process_calendar_selection(callback_query: types.CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    
    if selected:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if date.date() < datetime.date.today():
            await callback_query.message.edit_text("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:")
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:",
                reply_markup=await SimpleCalendar().start_calendar()
            )
            return
        
        await callback_query.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date.strftime('%d.%m.%Y')}")
        
        data = await state.get_data()
        
        order = await create_order(
            data['order_name'],
            data['order_client'],
            data['order_cost'],
            date.date()
        )
        
        if order:
            await callback_query.message.answer("‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        else:
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.")
            
        await state.clear()
        await show_orders_menu(callback_query.message, state)

async def show_active_orders(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏"""
    active_orders = await get_unpaid_orders()
    paid_orders = await get_paid_orders()

    if not active_orders and not paid_orders:
        await message.answer("üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç.")
    else:
        response = "üìà –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n\n"
    
        if active_orders:
            response += "üí≥ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ:\n"
            for order in active_orders:
                response += f"ID: {order.id} - {order.name} ({order.client.name}) - {order.cost} —Ä—É–±\n"
            response += "\n"
    
        if paid_orders:
            response += "‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ:\n"
            for order in paid_orders:
                deadline_str = order.deadline.strftime('%d.%m.%Y') if order.deadline else "–Ω–µ —É–∫–∞–∑–∞–Ω"
                response += f"ID: {order.id} - {order.name} ({order.client.name}) - {order.cost} —Ä—É–±\n"
                response += f"  –°—Ä–æ–∫: {deadline_str}\n"
            response += "\n"
    
        response += "üí≥ –î–ª—è –æ–ø–ª–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–û–ø–µ—Ä–∞—Ü–∏–∏' -> '–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥'"
    
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4096:
            for x in range(0, len(response), 4096):
                await message.answer(response[x:x+4096])
        else:
            await message.answer(response)

    await show_orders_menu(message, state)

async def show_archived_orders(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å–¥–µ–ª–æ–∫"""
    completed_orders = await get_completed_orders()

    if not completed_orders:
        await message.answer("üìÅ –ê—Ä—Ö–∏–≤ —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç.")
    else:
        response = "üìÅ –ê—Ä—Ö–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:\n\n"
        for order in completed_orders:
            deadline_str = order.deadline.strftime('%d.%m.%Y') if order.deadline else "–Ω–µ —É–∫–∞–∑–∞–Ω"
            date_str = order.date.strftime('%d.%m.%Y')
    
            response += f"‚óè {order.name} ({order.client.name})\n"
            response += f"  –°—Ç–æ–∏–º–æ—Å—Ç—å: {order.cost} —Ä—É–±\n"
            response += f"  –°—Ä–æ–∫: {deadline_str}\n"
            response += f"  –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {date_str}\n\n"

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4096:
            for x in range(0, len(response), 4096):
                await message.answer(response[x:x+4096])
        else:
            await message.answer(response)

    await show_orders_menu(message, state)

# ===== –û–ü–ï–†–ê–¶–ò–ò =====
async def show_orders_for_income(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏"""
    unpaid_orders = await get_unpaid_orders()

    if not unpaid_orders:
        await message.answer("‚ùå –ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.")
        return

    keyboard = []
    for order in unpaid_orders:
        button_text = f"{order.name} ({order.client.name}) - {order.cost} —Ä—É–±"
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"income_{order.id}")])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è —É—á–µ—Ç–∞ –æ–ø–ª–∞—Ç—ã:",
        reply_markup=reply_markup
    )

async def income_button_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"""
    order_id = int(callback_query.data.split('_')[1])
    success, order = await update_order_status(order_id, 'paid')

    if success:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤—è–∑–∞–Ω–Ω—ã–º –ø–æ–ª—è–º
        order_name = await sync_to_async(lambda: order.name)()
        client_name = await sync_to_async(lambda: order.client.name)()
        
        await callback_query.message.edit_text(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—á—Ç–µ–Ω–∞! –°–¥–µ–ª–∫–∞ '{order_name}' ({client_name}) –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ."
        )
    else:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—á–µ—Ç–µ –æ–ø–ª–∞—Ç—ã.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
    await show_operations_menu(callback_query.message, state)

async def get_expense_comment(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    if message.text == ButtonText.BACK:
        await show_operations_menu(message, state)
        return
        
    await state.update_data(expense_comment=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(Form.AWAITING_EXPENSE_COST)

async def get_expense_cost(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞"""
    if message.text == ButtonText.BACK:
        await show_operations_menu(message, state)
        return
        
    try:
        cost = float(message.text)
        
        data = await state.get_data()
        expense = await create_expense(
            data['expense_comment'],
            cost
        )
        
        if expense:
            await message.answer("‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞.")
            
        await state.clear()
        await show_operations_menu(message, state)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        await state.set_state(Form.AWAITING_EXPENSE_COST)

async def show_operations_history(message: types.Message, state: FSMContext):
    """–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
    expenses = await sync_to_async(list)(Expense.objects.all())
    paid_orders = await get_paid_orders()
    completed_orders = await get_completed_orders()
    
    if not expenses and not paid_orders and not completed_orders:
        await message.answer("üìù –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞.")
    else:
        response = "üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n"
        
        if paid_orders or completed_orders:
            response += "üí∞ –î–æ—Ö–æ–¥—ã (–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏):\n"
            for order in paid_orders + completed_orders:
                date_str = order.date.strftime('%d.%m.%Y')
                response += f"‚óè {date_str} - {order.name} - +{order.cost} —Ä—É–±\n"
            response += "\n"
        
        if expenses:
            response += "üí∏ –†–∞—Å—Ö–æ–¥—ã:\n"
            for expense in expenses:
                date_str = expense.date.strftime('%d.%m.%Y')
                response += f"‚óè {date_str} - {expense.comment} - -{expense.cost} —Ä—É–±\n"
        
        # –ò—Ç–æ–≥–∏
        total_income = sum(order.cost for order in paid_orders + completed_orders)
        total_expense = sum(expense.cost for expense in expenses)
        balance = total_income - total_expense
        
        response += f"\nüìä –ò—Ç–æ–≥–∏:\n"
        response += f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income} —Ä—É–±\n"
        response += f"–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {total_expense} —Ä—É–±\n"
        response += f"–ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±"
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4096:
            for x in range(0, len(response), 4096):
                await message.answer(response[x:x+4096])
        else:
            await message.answer(response)
    
    await show_operations_menu(message, state)

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
async def show_stats(message: types.Message, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    total_orders, active_orders, archived_orders, expensive_order = await get_order_stats()
    total_income, total_expense, month_income, month_expense = await get_financial_stats()
    
    clients_count = len(await get_all_clients())
    
    expensive_order_name = expensive_order.name if expensive_order else 'N/A'
    expensive_order_cost = expensive_order.cost if expensive_order else 0
    
    response = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
        f"üë• –ö–ª–∏–µ–Ω—Ç—ã: {clients_count}\n"
        f"üìã –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_orders}\n"
        f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_orders}\n"
        f"üìÅ –í –∞—Ä—Ö–∏–≤–µ: {archived_orders}\n"
        f"üí∞ –°–∞–º–∞—è –∫—Ä—É–ø–Ω–∞—è —Å–¥–µ–ª–∫–∞: {expensive_order_name} "
        f"({expensive_order_cost} —Ä—É–±)\n\n"
        f"üíµ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income} —Ä—É–±\n"
        f"üí∏ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {total_expense} —Ä—É–±\n"
        f"‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: {total_income - total_expense} —Ä—É–±\n"
        f"üìÖ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {month_income} —Ä—É–±\n"
        f"üìÖ –†–∞—Å—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {month_expense} —Ä—É–±\n"
        f"üìÖ –ú–µ—Å—è—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: {month_income - month_expense} —Ä—É–±"
    )
    
    await message.answer(response)
    await show_main_menu(message, state)

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ CRM —Å–∏—Å—Ç–µ–º—ã –Ω–∞ aiogram'
    
    def handle(self, *args, **kwargs):
        TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        if not TOKEN:
            self.stderr.write("–û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        storage = MemoryStorage()
        bot = Bot(token=TOKEN)
        dp = Dispatcher(storage=storage)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        dp.message.register(start, AiogramCommand("start"))
        dp.message.register(cancel, AiogramCommand("cancel"))
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        dp.message.register(handle_main_menu, StateFilter(Form.MAIN_MENU))
        
        # –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–æ–≤
        dp.message.register(handle_clients_menu, StateFilter(Form.CLIENTS_MENU))
        dp.message.register(get_client_name, StateFilter(Form.AWAITING_CLIENT_NAME))
        dp.message.register(get_client_contacts, StateFilter(Form.AWAITING_CLIENT_CONTACTS))
        dp.message.register(get_client_notes, StateFilter(Form.AWAITING_CLIENT_NOTES))
        
        # –ú–µ–Ω—é —Å–¥–µ–ª–æ–∫
        dp.message.register(handle_orders_menu, StateFilter(Form.ORDERS_MENU))
        dp.message.register(get_order_name, StateFilter(Form.AWAITING_ORDER_NAME))
        dp.message.register(get_order_client, StateFilter(Form.AWAITING_ORDER_CLIENT))
        dp.message.register(get_order_cost, StateFilter(Form.AWAITING_ORDER_COST))
        
        # –ú–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π
        dp.message.register(handle_operations_menu, StateFilter(Form.OPERATIONS_MENU))
        dp.message.register(get_expense_comment, StateFilter(Form.AWAITING_EXPENSE_COMMENT))
        dp.message.register(get_expense_cost, StateFilter(Form.AWAITING_EXPENSE_COST))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
        dp.callback_query.register(income_button_handler, F.data.startswith("income_"))
        dp.callback_query.register(complete_order_button_handler, F.data.startswith("complete_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        dp.callback_query.register(process_calendar_selection, SimpleCalendarCallback.filter(), StateFilter(Form.AWAITING_ORDER_DEADLINE))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        dp.errors.register(error_handler)
        
        self.stdout.write(self.style.SUCCESS('–ë–æ—Ç –Ω–∞ aiogram –∑–∞–ø—É—â–µ–Ω...'))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        asyncio.run(dp.start_polling(bot))