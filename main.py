import logging
import os
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
load_dotenv()
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not API_TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
logging.basicConfig(level=logging.INFO)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('finance.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
cursor.executescript('''
CREATE TABLE IF NOT EXISTS clients (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    contact TEXT,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS deals (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    client_id INTEGER,
    amount REAL,
    status TEXT DEFAULT '–ù–æ–≤–∞—è',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (client_id) REFERENCES clients(id)
);

CREATE TABLE IF NOT EXISTS payments (
    id INTEGER PRIMARY KEY,
    deal_id INTEGER,
    amount REAL,
    method TEXT,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (deal_id) REFERENCES deals(id)
);

CREATE TABLE IF NOT EXISTS finances (
    id INTEGER PRIMARY KEY,
    type TEXT CHECK(type IN ('–î–æ—Ö–æ–¥', '–†–∞—Å—Ö–æ–¥')),
    amount REAL,
    category TEXT,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
''')
conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class ClientStates(StatesGroup):
    name = State()
    contact = State()
    notes = State()

class DealStates(StatesGroup):
    name = State()
    client_id = State()
    amount = State()

class PaymentStates(StatesGroup):
    deal_id = State()
    amount = State()
    method = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –°–¥–µ–ª–∫–∏"), KeyboardButton(text="üë• –ö–ª–∏–µ–Ω—Ç—ã")],
            [KeyboardButton(text="üí∞ –ü–ª–∞—Ç–µ–∂–∏"), KeyboardButton(text="üìä –§–∏–Ω–∞–Ω—Å—ã")]
        ],
        resize_keyboard=True
    )

def deals_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def clients_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üíº –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Å–¥–µ–ª–æ–∫ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb()
    )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())

# –ö–ª–∏–µ–Ω—Ç—ã
@dp.message(F.text == "üë• –ö–ª–∏–µ–Ω—Ç—ã")
async def clients_menu(message: types.Message):
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏:", reply_markup=clients_kb())

@dp.message(F.text == "‚ûï –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç")
async def add_client_start(message: types.Message, state: FSMContext):
    await state.set_state(ClientStates.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(ClientStates.name)
async def process_client_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ClientStates.contact)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")

@dp.message(ClientStates.contact)
async def process_client_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await state.set_state(ClientStates.notes)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")

@dp.message(ClientStates.notes)
async def process_client_notes(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cursor.execute(
        "INSERT INTO clients (name, contact, notes) VALUES (?, ?, ?)",
        (data['name'], data['contact'], message.text or "–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫")
    )
    conn.commit()
    await state.clear()
    await message.answer("‚úÖ –ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_kb())

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
async def list_clients(message: types.Message):
    cursor.execute("SELECT id, name, contact FROM clients")
    clients = cursor.fetchall()
    
    if not clients:
        await message.answer("–ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    response = "üìã –ö–ª–∏–µ–Ω—Ç—ã:\n\n"
    for client in clients:
        response += f"üÜî {client[0]}\nüë§ {client[1]}\nüìû {client[2]}\n\n"
    
    await message.answer(response)

# –°–¥–µ–ª–∫–∏
@dp.message(F.text == "üìù –°–¥–µ–ª–∫–∏")
async def deals_menu(message: types.Message):
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏:", reply_markup=deals_kb())

@dp.message(F.text == "‚ûï –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞")
async def add_deal_start(message: types.Message, state: FSMContext):
    await state.set_state(DealStates.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(DealStates.name)
async def process_deal_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(DealStates.client_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ (0 –µ—Å–ª–∏ –Ω–µ—Ç):")

@dp.message(DealStates.client_id)
async def process_deal_client(message: types.Message, state: FSMContext):
    try:
        client_id = int(message.text)
        if client_id != 0:
            cursor.execute("SELECT 1 FROM clients WHERE id = ?", (client_id,))
            if not cursor.fetchone():
                await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
        
        await state.update_data(client_id=client_id if client_id != 0 else None)
        await state.set_state(DealStates.amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(DealStates.amount)
async def process_deal_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        data = await state.get_data()
        
        cursor.execute(
            "INSERT INTO deals (name, client_id, amount) VALUES (?, ?, ?)",
            (data['name'], data['client_id'], amount)
        )
        conn.commit()
        
        await state.clear()
        await message.answer("‚úÖ –°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_kb())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫")
async def list_deals(message: types.Message):
    cursor.execute('''
    SELECT d.id, d.name, c.name, d.amount, d.status 
    FROM deals d
    LEFT JOIN clients c ON d.client_id = c.id
    ''')
    deals = cursor.fetchall()
    
    if not deals:
        await message.answer("–°–¥–µ–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    response = "üìä –°–¥–µ–ª–∫–∏:\n\n"
    for deal in deals:
        response += (
            f"üÜî {deal[0]}\n"
            f"üìå {deal[1]}\n"
            f"üë§ {deal[2] or '–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞'}\n"
            f"üí∞ {deal[3]}\n"
            f"üü¢ {deal[4]}\n\n"
        )
    
    await message.answer(response)

# –ü–ª–∞—Ç–µ–∂–∏
@dp.message(F.text == "üí∞ –ü–ª–∞—Ç–µ–∂–∏")
async def payments_menu(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üí≥ –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text == "üí≥ –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂")
async def add_payment_start(message: types.Message, state: FSMContext):
    await state.set_state(PaymentStates.deal_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–¥–µ–ª–∫–∏:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(PaymentStates.deal_id)
async def process_payment_deal(message: types.Message, state: FSMContext):
    try:
        deal_id = int(message.text)
        cursor.execute("SELECT 1 FROM deals WHERE id = ?", (deal_id,))
        if not cursor.fetchone():
            await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        await state.update_data(deal_id=deal_id)
        await state.set_state(PaymentStates.amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(PaymentStates.amount)
async def process_payment_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        await state.update_data(amount=amount)
        await state.set_state(PaymentStates.method)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(PaymentStates.method)
async def process_payment_method(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    cursor.execute(
        "INSERT INTO payments (deal_id, amount, method) VALUES (?, ?, ?)",
        (data['deal_id'], data['amount'], message.text)
    )
    conn.commit()
    
    await state.clear()
    await message.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_kb())

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())